<-- INDEX TRONG DATABASE -->

Index database là gì ?
    _Index là một cấu trúc dữ liệu được dùng để định vị và truy cập nhanh
    nhất vào dữ liệu trong các bảng database.
    _Index là một cách tối ưu hiệu suất truy vấn database bằng việc giảm
    lượng truy cập vào bộ nhớ khi thực hiện truy vấn.

Ví dụ:
    SELECT * 
    FROM Customers
    WHERE City LIKE 'LONDON'

    Khi không có Index cho cột City, truy vấn sẽ phải chạy qua tất cả các 
Row của bảng Customers để so sánh và lấy ra những Row thỏa mãn.
    Khi số lượng bản ghi lớn, truy vấn sẽ rất chậm
    _Nói đơn giản, index trỏ tới địa chỉ dữ liệu trong một bảng, giống như 
Mục lục của một cuốn sách (Gồm tên đề mục và số trang), nó giúp truy vấn trở 
nên nhanh chóng như việc bạn xem mục lục và tìm đúng trang cần đọc.

--Sự khác biệt giữa truy vấn số và chuỗi ký thực

String-

    SELECT TOP 100 * FROM tblScratch WHERE contactsurname = 'hoare' ORDER BY NEWID()

    Duration 430ms
    Reads 902
    CPU 203

Integer-

    SELECT TOP 100 * FROM tblScratch WHERE contacttyperef = 3 ORDER BY NEWID()

    Duration 136ms
    Reads 902
    CPU 79

--Các kiểu index 

*Hash index
    _Được tổ chức dưới dạng key-value với key là kết quả hash value của column được 
đánh index và value sẽ chứa 1 con trỏ đến chính xác row tương ứng
    _Hash index mạnh mẽ khi thực hiện các phép truy vấn với toán tử = hay <> (IN, NOT IN)
(có thể nhanh hơn cả B-tree)
    _Tuy nhiên lại không hữu ích khi gặp các trường hợp truy vấn với điều kiện như >, <, LIKE
    _Không thể tối ưu hóa toán tử ORDER BY bằng việc sử dụng Hash index bởi vì nó không thể 
tìm kiếm được phần tử tiếp theo trong Order

*B-Tree
    _Dữ liệu index trong B-Tree được tổ chức
        + Root node - node đầu tiên đứng vị trí cao nhất
        + Child nodes - nodes con được trỏ từ Parent nodes (vị trí cao hơn)
        + Parent nodes - nodes cha trong cây mà có con trỏ sang các Child nodes
        + Leaf nodes - nodes lá, không trỏ đến bất kì nodes nào khác, có vị trí thấp nhất trong nhánh của cây
        + Internal nodes - tất cả các nodes không phải là nodes lá
        + External nodes - tên gọi khác của nodes lá
    _B-Tree index được sử dụng trong các biểu thức so sánh dạng: = , >, >=, <, <=, BETWEEN và LIKE
    _B-Tree index được sử dụng cho những column trong bảng khi muốn tìm kiếm 1 giá trị nằm trong khoảng
    nào đó

-- Cơ chế đánh index (cho 1 trường) :
    + Tìm vị trí thích hợp để chèn dữ liệu mới
    + Chèn dữ liệu mới vào lá phù hợp
    + Phân chia nút lá tràn (nếu cần)
    + Lặp lại quá trình nếu cần thiết

Ban đầu :           11                                  Chèn 9:                     11
            6               15                                          6                       15
        3       8       12      18                                  3       8               12      18
                                                                                9

Chèn nút lá tràn 10:
                        11
            6                       15
        3       9               12      18
            8       10

+ Tương tự nhưng sẽ đánh index cho từng trường theo thứ tự

--Tóm tắt các loại đánh index
*Hash index
    _Hash index sử dụng hàm bám để ánh xạ các giá trị cột thành các khóa. Các khóa này sau đó được lưu trữ trong một bảng băm,
nơi chúng có thể tìm thấy nhanh chóng bằng cách sử dụng hàm băm ngược.
    _Hash index có hiệu suất cao cho các truy vấn khớp chính xác, chẳng hạn như SELECT * FROM table WHERE column = value
    Tuy nhiên, chúng không hiệu quả cho các truy vấn khớp khoảng, chẳng hạn như SELECT * FROM table WHERE column > value

*B-Tree index
    _B-tree index sử dụng một cấu trúc cây để lưu trữ các giá trị cột. Vây này được tổ chức theo thứ tự tăng dần, giúp các giá trị 
có thể được tìm thấy nhanh chóng bằng cách duyệt qua cây
    _B-tree index có hiệu suất cao cho cả truy vấn khớp chính xấc và khớp khoảng. chúng thường được coi là loại index hiệu quả nhất

--Cú pháp
CREATE INDEX index_name
ON table_name (column1, column2, ...);

CREATE UNIQUE INDEX index_name
ON table_name (column1, column2, ...);
                        --giá trị trong cột không được trùng Lặp

--Lưu ý về việc dùng Index trong Database
*Cẩn trong:
    + Index sẽ làm tốn thêm bộ nhớ để lưu trữ.
    + Làm chậm các hoạt động khác, khi insert hay update column sử dụng index, index cần được 
    điểu chỉnh (reindex) sẽ tiêu tốn một khoảng thời gian
    + Việc đánh index bừa bãi, lộn xộn, không những không tăng tốc độ truy vấn mà còn làm giảm 
    hiệu năng hoạt động 
* Các trường hợp nên sử dụng index:
    + Những bảng dữ liệu vừa và lớn (>100 nghìn dòng)
    + Các column thường xuyên sử dụng trong mệnh đề WHERE, JOIN và ORDER BY
* Các trường hợp không nên sử dụng index:
    + Cơ sở dữ liệu nhỏ hoặc cần sử dụng tài nguyên ít
    + Dữ liệu thay đổi thường xuyên
    + Cột chứa dữ liệu không đa dạng
    + Cột chứa dữ liệu text quá dài (ví dụ như description)
* Cần phải lưu ý về thứ tự columns trong một index nhiều trường
* Các trường hợp Index sẽ được tạo tự động
    + Khóa chính
    + Khóa ngoại
    + Các cột UNIQUE

